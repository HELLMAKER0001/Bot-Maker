{"version":3,"sources":["Api/api.ts","Api/Strings/Endings.ts","Components/Main.tsx","App.tsx","index.tsx"],"names":["CreateBotFile","client","msges","a","commands","Promise","all","forEach","message","cmd","trigger","WholeCode","FirstLines","Token","Prefix","Main","props","state","TOKEN","tempTrigger","tempMessage","totalMessages","className","href","type","placeholder","onChange","e","setState","target","value","onClick","push","addedTotalMessages","this","CompiledCode","Compiler","DownloadElement","document","createElement","stringTODOwnload","codeToDownload","Blob","URL","createObjectURL","download","body","appendChild","click","Component","App","ReactDOM","render","getElementById"],"mappings":"yOAqBeA,EAdI,uCAAG,WAAOC,EAAgBC,GAAvB,iBAAAC,EAAA,6DACdC,EAAW,GAEfC,QAAQC,IAAI,CACRJ,EAAMK,SAAQ,SAAAC,GACV,IAAIC,EAAG,eAAWD,EAAQE,QAAnB,uCAAyDF,EAAQA,QAAjE,gBACPJ,EAAWA,EAAW,KAAMK,OAIhCE,EAAYC,2NAAwBR,ECjB9B,QDiBM,4BAAkEH,EAAOY,MAAzE,iCAAuGZ,EAAOa,OAA9G,6BAVE,kBAWXH,GAXW,2CAAH,wDEJEI,E,kDAEjB,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IACDC,MAAQ,CACTC,MAAO,GACPhB,MAAO,GACPiB,YAAa,GACbC,YAAa,GACbC,cAAe,GAPC,E,qDAYd,IAAD,OAEL,OACI,gCACI,oBAAIC,UAAU,YAAd,uBACA,uBAEA,sBAAKA,UAAU,eAAf,UACI,2DAA6B,mBAAGC,KAAK,8CAAR,kBAA7B,OACA,uBAAOC,KAAK,WAAWF,UAAU,eAAeG,YAAY,WAAWC,SAAU,SAACC,GAC9E,EAAKC,SAAS,CAAEV,MAAOS,EAAEE,OAAOC,WAGpC,uBACA,0DAEA,uBAAOR,UAAU,eAAeG,YAAY,UAAUC,SAAU,SAACC,GAC7D,EAAKC,SAAS,CAEVT,YAAaQ,EAAEE,OAAOC,WAG9B,uBAAOR,UAAU,eAAeG,YAAY,UAAUC,SAAU,SAACC,GAC7D,EAAKC,SAAS,CAEVR,YAAaO,EAAEE,OAAOC,WAG9B,uBACA,wBAAQN,KAAK,SAASF,UAAU,eAAeS,QAAS,WACpD,IAAIvB,EAAU,CAEVA,QAAS,EAAKS,MAAMG,YAEpBV,QAAS,EAAKO,MAAME,aAGxB,EAAKF,MAAMf,MAAM8B,KAAKxB,GAKtB,IAAIyB,EAAqB,EAAKhB,MAAMI,cAAgB,EAEpD,EAAKO,SAAS,CAEVP,cAAeY,KAjBvB,oBAuBJ,uBACA,mDAEIC,KAAKjB,MAAMI,iBAEf,uBACA,uBACA,wBAAQC,UAAU,kBAAkBS,QAAO,sBAAE,kCAAA5B,EAAA,6DAGrCgC,EAAgBC,EAAS,CAAEvB,MAAO,EAAKI,MAAMC,MAAOJ,OAAQ,KAAO,EAAKG,MAAMf,OAE9EmC,EAAkBC,SAASC,cAAc,KALJ,SAMZJ,EANY,OAMrCK,EANqC,OAOnCC,EAAiB,IAAIC,KAAK,CAACF,GAAmB,CAAEhB,KAAM,oBAE5Da,EAAgBd,KAAOoB,IAAIC,gBAAgBH,GAC3CJ,EAAgBQ,SAAW,SAC3BP,SAASQ,KAAKC,YAAYV,GAC1BA,EAAgBW,QAZyB,4CAA7C,2B,GAzEkBC,aCSnBC,MATf,WACE,OACE,sBAAK5B,UAAU,MAAf,UACE,uBACA,cAAC,EAAD,Q,YCEN6B,IAASC,OACP,cAAC,EAAD,IACAd,SAASe,eAAe,W","file":"static/js/main.fd5cb2c7.chunk.js","sourcesContent":["import Client from \"./types/Client\";\r\nimport Message from \"./types/Messages\";\r\n\r\nimport FirstLines from \"./Strings/FirstLines\";\r\nimport MidLines from \"./Strings/MidLines\";\r\nimport Endings from \"./Strings/Endings\";\r\n\r\nconst CreateBotFile = async (client: Client, msges: Message[]) => {\r\n    let commands = \"\";\r\n\r\n    Promise.all([\r\n        msges.forEach(message => {\r\n            let cmd = `case\"${message.trigger}\": \\n message.channel.send(\"${message.message}\") \\n break;`;\r\n            commands = commands + \"\\n\" +cmd ;\r\n        })\r\n    ]);\r\n\r\n    let WholeCode = FirstLines + MidLines + commands + Endings + `\\n const TOKEN = \"${client.Token}\"; \\n const PREFIX = \"${client.Prefix}\"; \\n Client.login(TOKEN)`;\r\n    return WholeCode\r\n}\r\n\r\nexport default CreateBotFile;","export default `}\r\n})`;\r\n","import React, { Component } from 'react'\r\nimport Compiler from \"../Api/api\";\r\n\r\nexport default class Main extends Component {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            TOKEN: \"\",\r\n            msges: [],\r\n            tempTrigger: \"\",\r\n            tempMessage: \"\",\r\n            totalMessages: 0\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        //@ts-ignore\r\n        return (\r\n            <div>\r\n                <h1 className=\"top-title\">Bot Maker</h1>\r\n                <br />\r\n\r\n                <div className=\"body-options\">\r\n                    <label>Bot's Token (get from <a href=\"https://discord.com/developers/applications\">here</a>)</label>\r\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Token...\" onChange={(e) => {\r\n                        this.setState({ TOKEN: e.target.value });\r\n                        //@ts-ignore\r\n                    }} />\r\n                    <br />\r\n                    <label>Messages and triggers</label>\r\n\r\n                    <input className=\"form-control\" placeholder=\"Trigger\" onChange={(e) => {\r\n                        this.setState({\r\n                            //@ts-ignore\r\n                            tempTrigger: e.target.value\r\n                        });\r\n                    }} />\r\n                    <input className=\"form-control\" placeholder=\"Message\" onChange={(e) => {\r\n                        this.setState({\r\n                            //@ts-ignore\r\n                            tempMessage: e.target.value\r\n                        });\r\n                    }} />\r\n                    <br />\r\n                    <button type=\"button\" className=\"btn btn-dark\" onClick={() => {\r\n                        let message = {\r\n                            //@ts-ignore\r\n                            message: this.state.tempMessage,\r\n                            //@ts-ignore\r\n                            trigger: this.state.tempTrigger\r\n                        };\r\n                        //@ts-ignore\r\n                        this.state.msges.push(message);\r\n                        \r\n\r\n                        //@ts-ignore\r\n\r\n                        var addedTotalMessages = this.state.totalMessages + 1;\r\n\r\n                        this.setState({\r\n                            //@ts-ignore\r\n                            totalMessages: addedTotalMessages\r\n                        });\r\n\r\n\r\n                    }}>Add</button>\r\n                </div>\r\n                <br />\r\n                <span>Total Messages {\r\n                    //@ts-ignore\r\n                    this.state.totalMessages\r\n                }</span>\r\n                <br />\r\n                <br />\r\n                <button className=\"btn btn-primary\" onClick={async () => {\r\n            \r\n                    //@ts-ignore\r\n                    let CompiledCode = (Compiler({ Token: this.state.TOKEN, Prefix: \"$\" }, this.state.msges));\r\n\r\n                    let DownloadElement = document.createElement(\"a\");\r\n                    let stringTODOwnload = await CompiledCode;\r\n                    const codeToDownload = new Blob([stringTODOwnload], { type: \"text/javascript\" });\r\n\r\n                    DownloadElement.href = URL.createObjectURL(codeToDownload);\r\n                    DownloadElement.download = \"Bot.js\";\r\n                    document.body.appendChild(DownloadElement);\r\n                    DownloadElement.click();\r\n\r\n                }}>Create</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport Main from \"./Components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <br/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport \"./CSS/main.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}